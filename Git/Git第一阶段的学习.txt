学习GIT已经有一段时间了，做一下总结
当初为什么会使用GIT？
大概是因为工作可能会需要 而且确实也需要这么一个跨平台跨设备的仓库 方便与他人交流

对Git的愿景是什么？
1. 平时在写代码的时候可以多设备的存放。当我在台式机上写了代码之后，我可以在笔记本上进行修改，查看。或者在我这么弄完之后，我可以在笔记本上做做笔记，一边对照，一边学习。
//我突然想到一个问题，它下载到本地的文件在哪个文件夹？我如何将一个文件夹作为GIT本地仓库？

2. 方便查看平时写的各种内容，即便内容更替，也能查看以前的内容。

3. 我甚至可以将GIT作为一个工作安排表，也可以看到之前的行为安排。

第一个阶段学习了些什么？
GIT的运行模式，如何上传一个文件，如何链接远程仓库，推送或者拉取远程仓库资源（感觉也不是特别熟练HH，在之后一定要用上！）

那么简单谈谈GIT

Git的内在设计
个人感觉 GIT更像是一个反向链表，每个节点就是一个快照，里面存放了commit object，commit 又存放了tree object,tree里面又放了blob object（也就是压缩后的完整文件）
Git的分支就是一个指向某次提交的轻量级的可移动指针，而Git默认的指针就是master。每次提交时，都会自动向前移动。Head是指向当前所在的本地分支的指针。
commit:包括作者和邮箱地址、已输入的提交信息（树对象的指针？）以及指向其父提交的指针  可以理解为 包含了提交的全部元数据和指向根目录树对象的指针。（元数据：关于数据的数据）
tree :记录着目录结构以及BLOB对象和文件名之间的对应关系
blob： 保存文件内容

GIT中文件分为两类：已经追踪的文件和未追踪的文件
已追踪的文件分为三类：已修改(modified)、已提交(committed)、已暂存(staged)。
committed 数据库被安全的提交到了本地
modified 已修改文件，尚未提交到数据库
staged 对已修改的文件做出了标识，将其加入到下一次的提交的快照中

常用指令：

Git add <T> 将文件提交到暂存区，如果是未追踪的文件会同时追踪它。
此时：
如果修改文件，此时文件的状态将变成 已修改，同时会    此时会留一个快照？指向该文件，并将该文件的状态改为已修改。如果上传则会将暂存区的快照上传。
如果提交文件，此时文件的状态将变成 未修改。

Git commit <T> 将暂存区的文件提交到本地数据库
Git commit -m‘ ~’  提交的同时写上提交说明
Git commit -a 将所有已追踪文件提交到本地数据库
Git commit -amend 修改提交效果，即修改上一次的提交，但并不产生新的提交

Git remote 查看远程仓库
Git remote  add [shortname] [url] 添加远程仓库
Git remote -v 查看仓库地址

Git checkout -- <> 将文件恢复到上个版本
Git checkout [branchname] 将本地文件恢复到某分支 即将HEAD 指向该分支，并使用该分支
Git checkout -b [shortname] 创建并使用分支

Git branch 查看分支
Git branch -d [branchname] 删除分支
