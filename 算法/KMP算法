很抱歉，现在才来复盘。其实也不算复盘，因为最开始的那道回文串还没写。不过我先整理下KMP算法。
KMP算法，怎么说呢，道理理解起来倒不是很复杂，就是核心算法的理解上需要一定的思路。
简单的说，KMP算法就是一个在寻找字符串匹配时的偷懒算法
可能我们在生活中也能思考出来，但是这个算法将这个思想公式化了，就很优秀。
卖这么多关子，究竟是啥？
此时有串A，串B。我们在寻找串A中是否存在串B，或者说串B在串A的哪里，我们就会用到这个算法。
我们在平时对这种问题就是直接从串A的第一个字符开始比较，和串B是否相同。如果出错，我们就回到开头，换第二个字符再进行比较。
KMP算法：如果出错了，串A不回退
		 串B也尽可能的不回去
原谅我不会画图，见网上大佬们的攻略即可。
现在写一下我在学习KMP算法中遇到的问题
1.串B回退理解的问题
串B回退，就相当于看现在最近的比较过的是否和开局有相同的，如果有比较过的，那么我们就直接可以直接退到比较的那里，没有就算了。
2.Value和next值得计算方法
最开始在理解的时候，value值和Next值都非常的好理解，next = value右移一位，因为如果当前失配得回到上一个字符，然后再比较回退后的字符和下一个字符。这样就导致了我对next的计算完全是通过value再进行计算。再退一万步讲，我在实战的时候对value也不是很明白具体该怎么计算。
我在计算value时遇到了一个问题：如果当前值不匹配，那么该怎么计算value
第一次在写value算法的时候，我直接是将其回退到了第一个字符，在遇到了字符abaababaab的时候发现了问题。
结论：在遇到这种情况，我们应该将失配的下标回退到上一个相等的字符那里，整个有点像套娃，全都是一个思想，我就是想偷懒，怎么的？
在写的时候才发现，直接计算next值要方便很多，甚至可以说这让代码的优雅程度上升了好几个档次。

value:
v[0] = 0;
k = 0;
for(int i = 1; i < n; ){
//要分为k=0和K>0两种情况，k=0时，一般是回退到了第一个字符，此时我们比较初始和当前值即可，但是不管如何我们都得将i继续推进。
但是如果当k>0的情况，如果相同i当然继续推进，但是如果不同我们则将k回退，i不动。
if(k == 0)
{
if(s[0] == s[i])
	k++;
	value[i] = k;
	i++;
}
else
{
	if(s[0]==s[i]){
	k = k+1;
	value[i] = k;
	i ++;
	}
	else
	k = value[k-1]; // 因为是指向上一个位置的回退位，而此时的K是长度，不是坐标
}
}




next:
next[0] = -1;
k = -1;
for(int i = 1; i<n; )
{
//为什么说next值更好计算呢，因为当其回退到第一个字符并且第一个字符也不匹配的时候，我们会取到v[0]/next[0].如果是value值则会是0，next值则是1，我们只有在next的时候才能明确的得到，第一个字符不匹配。
如果第一个字符不匹配，那么我们会将i继续推进，k也会增加，因为来到了-1,而这个情况和ik匹配是一样的结果。
if(k == -1||s[i] == s[k])
{
i++;
k++;
next[i] = k;
}
else
{
k = next[k];
}

其余就没啥问题了，等明天再对原题做详细的复盘