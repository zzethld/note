给你一个整数数组 nums，每次 操作 会从中选择一个元素并 将该元素的值减少 1。

如果符合下列情况之一，则数组 A 就是 锯齿数组：

每个偶数索引对应的元素都大于相邻的元素，即 A[0] > A[1] < A[2] > A[3] < A[4] > ...
或者，每个奇数索引对应的元素都大于相邻的元素，即 A[0] < A[1] > A[2] < A[3] > A[4] < ...
返回将数组 nums 转换为锯齿数组所需的最小操作次数。

 

示例 1：

输入：nums = [1,2,3]
输出：2
解释：我们可以把 2 递减到 0，或把 3 递减到 1。
示例 2：

输入：nums = [9,6,1,6,2]
输出：4
 

提示：
1 <= nums.length <= 1000
1 <= nums[i] <= 1000
来源：力扣（LeetCode）

time : 117min
### 解题思路
原思路：读题可得
1.每隔两个，符号相同
2.不能改变数组大小，只能改变数组元素
3.求最小操作数，即数相差最小
4.且只能减操作
所以得出
创建一个新数组，遍历两次，模拟行为即可。
s是正反标识，
if(s) {
    if(nums[i]<nums[i+1])
        sum = sum + 0;
    else{
        sum = sum + nums[i] - nums[i+1] + 1;
        nums[i] = nums[i+1] - 1;
        }
    s = !s;
}     
else ......

后面看了大佬的解答之后：
若是 a0<a1>a2<a3>a4
or a0>a1<a2>a3<a4
又只能减操作，则我们找类似a0>a1<a2，a1这样的夹心元素即可。
只需要对比a0,a2中的最小值，让a1=min(a0,a2) - 1即可（也可能天然就是这样）
if(i&1)
sum = sum + max(0, nums[i] - min(l,r) +1)；

### 总结
自己在分析题意的时候，并没有更深入的去了解，浅尝则止。
虽说做对了，但是明显是个半成品。
收获：
1.vector<T> 动态数组, vector.size()可以知道数组大小
2.max/min(m,n)很方便
3.l = m>n?x:y; 很简便的写法
4.位与操作，i&1可判断奇偶，很骚。这是将i二进制化与1进行位与操作，奇数则为1，偶数为0。（奇数转成二进制，末尾为1，偶数则为0）
### 代码

```cpp
class Solution {
public:
    int movesToMakeZigzag(vector<int>& nums) {
        int j = 0;
        int m = 0;
        int N = nums.size();
        for(int i = 0; i < N ; i++)
        {
          int l = i>0?nums[i-1]:1001;
          int r = i<N-1?nums[i+1]:1001;
          if(i&1)
          {
              m = m + max(0,nums[i]- min(l,r)+1);
          }
          else
            j = j + max(0, nums[i] - min(l,r) + 1);
        }
        
       if(m<j)
        return m;
        else
        return j;       
        
    }
};
```