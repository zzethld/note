给定一个未经排序的整数数组，找到最长且连续的的递增序列，并返回该序列的长度。

 

示例 1:

输入: [1,3,5,4,7]
输出: 3
解释: 最长连续递增序列是 [1,3,5], 长度为3。
尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。 
示例 2:

输入: [2,2,2,2,2]
输出: 1
解释: 最长连续递增序列是 [2], 长度为1。
 

注意：数组长度不会超过10000。

来源：力扣（LeetCode）

解题思路
这题本身没什么难点，遍历即可。
唯一值得说的是，要注意自己找的测试用例，我觉得我测试白学了。不过唯一值得庆幸的是，反正我测试也没怎么学，哈哈
本身条件在数组上并没有设置太多限制，测试空数组，单数组，连增，连减，乱序数组即可。
此后加强测试水平

代码

class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {
            int n = nums.size();
            int j = 1, k = 1;
            for(int i = 0; i < n-1; i++)
            {
                if(nums[i] < nums[i+1])
                j++;
                else
                {
                 k = j>k?j:k;
                 j = 1;   
                }
            }
            if(n == 0)
            k = 0;
            else
            k = j>k?j:k;
            return k;
    }
};


